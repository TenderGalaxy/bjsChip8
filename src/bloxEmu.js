/* GOALS   */
/* Write IBM Logo
00E0
1NNN
6XNN
7XNN
ANNN
DXYN
*/

function resetDisplay(){
  display = []
  for(let i = 0; i < 64; i++){
    display[i]  = []
    for(let k = 0; k < 32; k++){
        display[i].push(OFF_COLOR)
    }
  }
}


function init(){
  ON_COLOR =  "Black Concrete"
  OFF_COLOR = "White Concrete"
  ram = []
  for(let i = 0; i < 4096; i++){
    ram.push(0x0000)
  }
}

function swc0(args){
  switch(args[2]){
    case 14:
      api.log(`Display Reset`)
      resetDisplay()
      break
    default:
      break
  }
}

function init2(){
  for(let i = 0; i < rom.length; i++){
    ram[0x200 + i] = rom[i]
  }
	regs = []
  for(let i = 0; i < 16; i++){
    regs.push(0)
  }
  stack = []
  DT = 0
  ST = 0
  VF = 0
  PC = 0x200
  SP = stack[stack.length - 1]
  I = 0x200
  resetDisplay()
}
function init3(){
	for(let i = -4; i < 4; i++){
		api.setBlockRect([i*8,32,0],[i*8+8,0,0],"White Concrete")
	}
}

function interpret(line){
  api.log(`${line.toString(16)} at ${curr_tick}`)
  args = []
  for(let i = 0; i < 4; i++){
    args.push(line % 16)
    line = Math.floor(line/16)
  }
  args.reverse()
  N = args[3]
  NN = 16 * args[2] + args[3]
  NNN = 256 * args[1] + 16 * args[2] + args[3]
  X = args[1]
  Y = args[2]

  switch (args[0]){
    case 0:
      swc0(args)
      break
    case 1:
      api.log(`JUMP TO: ${NNN}`)
      PC = NNN - 1
      break
    case 2:
      break
    case 3:
		  if(regs[X] == NN){
				PC += 2
			}
      break
    case 4:
			if(regs[X] != NN){
				PC += 2
			}
      break
    case 5:
			if(regs[X] == regs[Y]){
				PC += 2
			}
      break
    case 6:
      api.log(`Register ${X} set to ${NN}`)
      regs[X] = NN
      break
    case 7:
      api.log(`Add ${NN} to Register ${X} (Currently ${regs[X]})`)
      regs[X] += NN
      break
    case 8:
      break
    case 9:
			if(regs[X] != regs[Y]){
				PC += 2
			}
      break
    case 0xA:
      I = NNN
      api.log(`Index set to ${NNN.toString(16)} (${ram[NNN].toString(16)})`)
      break
    case 0xB:
      break
    case 0xC:
      break
    case 0xD:
      /* AHHHH DXYN IS HARD */
      api.log(`X ${regs[X] & 63}, Y ${regs[Y] & 31}, Height ${N}`)
      y = regs[Y] & 31
      regs[0xF]  = 0
      idx = I
      for(let i = 0; i < N; i++){
        if(y > 31){
          break
        }
        x = regs[X] & 63
        draw = ram[idx].toString(2)
        while(draw.length < 8){
          draw = "0" + draw
        }
        idx++
        
        for(let k = 0; k < draw.length; k++){
          x++
          if(x > 63){
            break
          }
          if(draw[k] == 1){
            if(display[x][y] == ON_COLOR){
              display[x][y] = OFF_COLOR
              regs[0xF] = 1
            } else {
              display[x][y] = ON_COLOR
            }
			api.setBlock([-32 + x, 32 - y, 0], display[x][y])
          }
        }
        y++
        
      }
      break
    case 0xE:
      break
    case 0xF:
      break
    
    }
}

function displ(){
    
  coord = [-32,32,0]
  for(let i = 0; i < display[0].length; i++){
    coord[0] = -32
    for(let k = 0; k < display.length; k++){
      if(display[k][i] == ON_COLOR){
        api.setBlock(coord, ON_COLOR)
      } else {
        api.setBlock(coord, OFF_COLOR)
      }
      coord[0]++
    }
    coord[1]--
  }
  
}

const rom = [
	// Offset 0x00000000 to 0x000002F8
	0x12, 0x0A, 0x60, 0x01, 0x00, 0xEE, 0x60, 0x02, 0x12, 0xA6, 0x00, 0xE0,
	0x68, 0x32, 0x6B, 0x1A, 0xA4, 0xF1, 0xD8, 0xB4, 0x68, 0x3A, 0xA4, 0xF5,
	0xD8, 0xB4, 0x68, 0x02, 0x69, 0x06, 0x6A, 0x0B, 0x6B, 0x01, 0x65, 0x2A,
	0x66, 0x2B, 0xA4, 0xB5, 0xD8, 0xB4, 0xA4, 0xED, 0xD9, 0xB4, 0xA4, 0xA5,
	0x36, 0x2B, 0xA4, 0xA1, 0xDA, 0xB4, 0x6B, 0x06, 0xA4, 0xB9, 0xD8, 0xB4,
	0xA4, 0xED, 0xD9, 0xB4, 0xA4, 0xA1, 0x45, 0x2A, 0xA4, 0xA5, 0xDA, 0xB4,
	0x6B, 0x0B, 0xA4, 0xBD, 0xD8, 0xB4, 0xA4, 0xED, 0xD9, 0xB4, 0xA4, 0xA1,
	0x55, 0x60, 0xA4, 0xA5, 0xDA, 0xB4, 0x6B, 0x10, 0xA4, 0xC5, 0xD8, 0xB4,
	0xA4, 0xED, 0xD9, 0xB4, 0xA4, 0xA1, 0x76, 0xFF, 0x46, 0x2A, 0xA4, 0xA5,
	0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xCD, 0xD8, 0xB4, 0xA4, 0xED, 0xD9, 0xB4,
	0xA4, 0xA1, 0x95, 0x60, 0xA4, 0xA5, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xAD,
	0xD8, 0xB4, 0xA4, 0xED, 0xD9, 0xB4, 0xA4, 0xA5, 0x12, 0x90, 0xA4, 0xA1,
	0xDA, 0xB4, 0x68, 0x12, 0x69, 0x16, 0x6A, 0x1B, 0x6B, 0x01, 0xA4, 0xB1,
	0xD8, 0xB4, 0xA4, 0xED, 0xD9, 0xB4, 0x60, 0x00, 0x22, 0x02, 0xA4, 0xA5,
	0x40, 0x00, 0xA4, 0xA1, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xA9, 0xD8, 0xB4,
	0xA4, 0xE1, 0xD9, 0xB4, 0xA4, 0xA5, 0x40, 0x02, 0xA4, 0xA1, 0x30, 0x00,
	0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9, 0xD8, 0xB4, 0xA4, 0xA9, 0xD9, 0xB4,
	0xA4, 0xA1, 0x65, 0x2A, 0x67, 0x00, 0x87, 0x50, 0x47, 0x2A, 0xA4, 0xA5,
	0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9, 0xD8, 0xB4, 0xA4, 0xAD, 0xD9, 0xB4,
	0xA4, 0xA1, 0x66, 0x0B, 0x67, 0x2A, 0x87, 0x61, 0x47, 0x2B, 0xA4, 0xA5,
	0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9, 0xD8, 0xB4, 0xA4, 0xB1, 0xD9, 0xB4,
	0xA4, 0xA1, 0x66, 0x78, 0x67, 0x1F, 0x87, 0x62, 0x47, 0x18, 0xA4, 0xA5,
	0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9, 0xD8, 0xB4, 0xA4, 0xB5, 0xD9, 0xB4,
	0xA4, 0xA1, 0x66, 0x78, 0x67, 0x1F, 0x87, 0x63, 0x47, 0x67, 0xA4, 0xA5,
	0xDA, 0xB4, 0x68, 0x22, 0x69, 0x26, 0x6A, 0x2B, 0x6B, 0x01, 0xA4, 0xC9,
	0xD8, 0xB4, 0xA4, 0xB9, 0xD9, 0xB4, 0xA4, 0xA1, 0x66, 0x8C, 0x67, 0x8C,
	0x87, 0x64, 0x47, 0x18, 0xA4, 0xA5, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9,
	0xD8, 0xB4, 0xA4, 0xBD, 0xD9, 0xB4, 0xA4, 0xA1, 0x66, 0x8C, 0x67, 0x78,
	0x87, 0x65, 0x47, 0xEC, 0xA4, 0xA5, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9,
	0xD8, 0xB4, 0xA4, 0xC5, 0xD9, 0xB4, 0xA4, 0xA1, 0x66, 0x78, 0x67, 0x8C,
	0x87, 0x67, 0x47, 0xEC, 0xA4, 0xA5, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9,
	0xD8, 0xB4, 0xA4, 0xC1, 0xD9, 0xB4, 0xA4, 0xA1, 0x66, 0x0F, 0x86, 0x66,
	0x46, 0x07, 0xA4, 0xA5, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9, 0xD8, 0xB4,
	0xA4, 0xE1, 0xD9, 0xB4, 0xA4, 0xA1, 0x66, 0xE0, 0x86, 0x6E, 0x46, 0xC0,
	0xA4, 0xA5, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xE5, 0xD8, 0xB4, 0xA4, 0xC1,
	0xD9, 0xB4, 0xA4, 0x9E, 0xF1, 0x65, 0xA4, 0xA5, 0x30, 0xAA, 0xA4, 0xA1,
	0x31, 0x55, 0xA4, 0xA1, 0xDA, 0xB4, 0x68, 0x32, 0x69, 0x36, 0x6A, 0x3B,
	0x6B, 0x01, 0xA4, 0xE5, 0xD8, 0xB4, 0xA4, 0xBD, 0xD9, 0xB4, 0xA4, 0x9E,
	0x60, 0x00, 0x61, 0x30, 0xF1, 0x55, 0xA4, 0x9E, 0xF0, 0x65, 0x81, 0x00,
	0xA4, 0x9F, 0xF0, 0x65, 0xA4, 0xA5, 0x30, 0x30, 0xA4, 0xA1, 0x31, 0x00,
	0xA4, 0xA1, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xE5, 0xD8, 0xB4, 0xA4, 0xB5,
	0xD9, 0xB4, 0xA4, 0x9E, 0x66, 0x89, 0xF6, 0x33, 0xF2, 0x65, 0xA4, 0xA1,
	0x30, 0x01, 0x14, 0x32, 0x31, 0x03, 0x14, 0x32, 0x32, 0x07, 0x14, 0x32,
	0xA4, 0x9E, 0x66, 0x41, 0xF6, 0x33, 0xF2, 0x65, 0xA4, 0xA1, 0x30, 0x00,
	0x14, 0x32, 0x31, 0x06, 0x14, 0x32, 0x32, 0x05, 0x14, 0x32, 0xA4, 0x9E,
	0x66, 0x04, 0xF6, 0x33, 0xF2, 0x65, 0xA4, 0xA1, 0x30, 0x00, 0x14, 0x32,
	0x31, 0x00, 0x14, 0x32, 0x32, 0x04, 0x14, 0x32, 0xA4, 0xA5, 0xDA, 0xB4,
	0x7B, 0x05, 0xA4, 0xE5, 0xD8, 0xB4, 0xA4, 0xE1, 0xD9, 0xB4, 0xA4, 0xA1,
	0x66, 0x04, 0xF6, 0x1E, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xE9, 0xD8, 0xB4,
	0xA4, 0xED, 0xD9, 0xB4, 0xA4, 0xA5, 0x66, 0xFF, 0x76, 0x0A, 0x36, 0x09,
	0xA4, 0xA1, 0x86, 0x66, 0x36, 0x04, 0xA4, 0xA1, 0x66, 0xFF, 0x60, 0x0A,
	0x86, 0x04, 0x36, 0x09, 0xA4, 0xA1, 0x86, 0x66, 0x36, 0x04, 0xA4, 0xA1,
	0x66, 0xFF, 0x86, 0x6E, 0x86, 0x66, 0x36, 0x7F, 0xA4, 0xA1, 0x86, 0x66,
	0x86, 0x6E, 0x36, 0x7E, 0xA4, 0xA1, 0x66, 0x05, 0x76, 0xF6, 0x36, 0xFB,
	0xA4, 0xA1, 0x66, 0x05, 0x86, 0x05, 0x36, 0xFB, 0xA4, 0xA1, 0x66, 0x05,
	0x80, 0x67, 0x30, 0xFB, 0xA4, 0xA1, 0xDA, 0xB4, 0x14, 0x9C, 0xAA, 0x55,
	0x00, 0x00, 0xA0, 0x40, 0xA0, 0x00, 0xA0, 0xC0, 0x80, 0xE0, 0xA0, 0xA0,
	0xE0, 0xC0, 0x40, 0x40, 0xE0, 0xE0, 0x20, 0xC0, 0xE0, 0xE0, 0x60, 0x20,
	0xE0, 0xA0, 0xE0, 0x20, 0x20, 0xE0, 0xC0, 0x20, 0xC0, 0x60, 0x80, 0xE0,
	0xE0, 0xE0, 0x20, 0x40, 0x40, 0xE0, 0xE0, 0xA0, 0xE0, 0xE0, 0xE0, 0x20,
	0xC0, 0x40, 0xA0, 0xE0, 0xA0, 0xC0, 0xE0, 0xA0, 0xE0, 0xE0, 0x80, 0x80,
	0xE0, 0xC0, 0xA0, 0xA0, 0xC0, 0xE0, 0xC0, 0x80, 0xE0, 0xE0, 0x80, 0xC0,
	0x80, 0x00, 0xA0, 0xA0, 0x40, 0xA0, 0x40, 0xA0, 0xA0, 0x0A, 0xAE, 0xA2,
	0x42, 0x38, 0x08, 0x30, 0xB8
];



function tick(){
	
	try{flag} catch {
		console.log("fenl_'s Bloxd Chip-8 emulator")
		flag = "ON"
    curr_tick = 0
    comm = 1
    init()
	}
	
	switch (flag) {
		case "RUNNING":
			comm = ram[PC]
    	PC++
    	comm = 256 * comm + ram[PC]
    	PC++
			console.log(comm)
    	interpret(comm)
    	curr_tick++
    	if(comm == 0){
     	 flag = "OFF"
    	}
			break
		case "INIT3":
			init3()
			flag = "RUNNING"
			break
		case "INIT":
			flag = "INIT2"
			break
	}
	
}
